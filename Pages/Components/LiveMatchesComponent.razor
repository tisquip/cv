@implements IDisposable


<h6>All Scottish and Danish Current Live Games</h6>

@if (!UtilityService?.DataProvidor?.LiveMatches?.data?.Any() ?? true)
{
    <p>No live games from either the Scottish or Danish Leagues at the moment</p>
}
else
{
    <div class="row">
        @foreach (var fixtureData in UtilityService.DataProvidor.LiveMatches.data)
        {
            <div class="col-md-6">
               <AltLiveMatchDisplayComponent Options="new LiveMatchDisplayComponentOptions(fixtureData)" />
            </div>
        }
    </div>
}


@code {
    [CascadingParameter]
    public UtilityService UtilityService { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        UtilityService.DataProvidor.LiveGameRecieved -= RequestStateChanged;
        UtilityService.DataProvidor.LiveGameRecieved += RequestStateChanged;

        UtilityService.DataProvidor.FetchingDataStatusChanged -= RequestStateChanged;
        UtilityService.DataProvidor.FetchingDataStatusChanged += RequestStateChanged;
    }

    async void RequestStateChanged(object sender, EventArgs eventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }




    public void Dispose()
    {
        UtilityService.DataProvidor.LiveGameRecieved -= RequestStateChanged;
        UtilityService.DataProvidor.FetchingDataStatusChanged += RequestStateChanged;
    }
}
