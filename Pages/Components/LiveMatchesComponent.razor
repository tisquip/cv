@implements IDisposable


<h1>Live Games</h1>
@if (_fixtures == null)
{
    <p>No Live Games</p>
}
else
{
    <div class="row">
        @foreach (var fixtureData in _fixtures.data)
        {
            <div class="col-md-6">
                <div class="kt-live-card">
                    <div class="row no-gutters">
                        <div class="col-md-1 kt-flex-vertical-center">
                            <div class="kt-live-logo">
                                <img class="img-fluid kt-live-team-logo my-auto" src="@fixtureData.localTeam.data.Logo_Path" />
                            </div>
                        </div>
                        <div class="col-md-3 kt-flex-vertical-center">
                            <div class="kt-live-team-name my-auto mx-auto">
                                <p class="kt-team-name font-weight-bolder mb-0 text-center">@fixtureData.localTeam.data.Name</p>
                            </div>
                        </div>
                        <div class="col-md-4 kt-flex-vertical-center">
                            <div class="kt-live-game-result mx-auto">
                                <p class="small text-center">
                                    <span class="small">
                                        @fixtureData.league.data.name
                                    </span>
                                </p>
                                <h3 class="text-center mb-0 font-weight-bolder">
                                    @fixtureData.scores.Localteam_Score : @fixtureData.scores.Visitorteam_Score
                                </h3>
                                @if (fixtureData.time.Minute.HasValue)
                                {
                            <p class="small text-center">
                                <span class="small">played: @fixtureData.time.Minute</span>
                                @if (@fixtureData.time.Minute > 50 && fixtureData.time.Status.ToUpper() != "LIVE")
                                {
                                    <span class="small"> | FINISHED</span>
                                }
                            </p>
                                  
                                }
                                else
                                {
                                    DateTime time = DateTime.Parse(fixtureData.time.Starting_At.Date_Time);
                                    <p class="small text-center">
                                        <span class="small">
                                            Starting at: @time.ToLongTimeString() UTC | @((time.AddHours(2)).ToLongTimeString())
                                        </span>
                               </p>
                                }
                            </div>
                        </div>
                        <div class="col-md-3 kt-flex-vertical-center">
                            <div class="kt-live-team-name my-auto mx-auto">
                                <p class="kt-team-name font-weight-bolder mb-0 text-center">@fixtureData.visitorTeam.data.Name</p>
                            </div>
                        </div>
                        <div class="col-md-1 kt-flex-vertical-center kt-flex-vertical-center">
                            <div class="kt-live-logo">
                                <img class="img-fluid kt-live-team-logo" src="@fixtureData.visitorTeam.data.Logo_Path" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        }
    </div>

}


@code {
    [CascadingParameter]
    public UtilityService UtilityService { get; set; }

    Fixtures _fixtures;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UtilityService.SignalRService.LiveMatchUpdate -= OnLiveMatchUpdate;
        UtilityService.SignalRService.LiveMatchUpdate += OnLiveMatchUpdate;
    }


    async void OnLiveMatchUpdate(object sender, Fixtures fixtures)
    {
        _fixtures = fixtures;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UtilityService.SignalRService.LiveMatchUpdate -= OnLiveMatchUpdate;
    }
}
